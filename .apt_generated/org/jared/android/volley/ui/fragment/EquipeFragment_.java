//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations.
//


package org.jared.android.volley.ui.fragment;

import java.sql.SQLException;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;
import com.googlecode.androidannotations.api.BackgroundExecutor;
import com.j256.ormlite.android.apptools.OpenHelperManager;
import com.j256.ormlite.dao.DaoManager;
import com.j256.ormlite.support.ConnectionSource;
import org.jared.android.volley.R.layout;
import org.jared.android.volley.VolleyApplication;
import org.jared.android.volley.model.Equipe;
import org.jared.android.volley.model.EquipeDetail;
import org.jared.android.volley.model.Event;
import org.jared.android.volley.model.Update;
import org.jared.android.volley.repository.VolleyDatabaseHelper;
import org.jared.android.volley.ui.widget.quickaction.Action;

public final class EquipeFragment_
    extends EquipeFragment
{

    private View contentView_;
    private ConnectionSource connectionSource_;
    private Handler handler_ = new Handler();

    private void init_(Bundle savedInstanceState) {
        application = ((VolleyApplication) getActivity().getApplication());
        connectionSource_ = OpenHelperManager.getHelper(getActivity(), VolleyDatabaseHelper.class).getConnectionSource();
        try {
            equipeDao = DaoManager.createDao(connectionSource_, Equipe.class);
        } catch (SQLException e) {
            Log.e("EquipeFragment_", "Could not create DAO", e);
        }
        try {
            eventDao = DaoManager.createDao(connectionSource_, Event.class);
        } catch (SQLException e) {
            Log.e("EquipeFragment_", "Could not create DAO", e);
        }
        try {
            equipeDetailDao = DaoManager.createDao(connectionSource_, EquipeDetail.class);
        } catch (SQLException e) {
            Log.e("EquipeFragment_", "Could not create DAO", e);
        }
        try {
            updateDao = DaoManager.createDao(connectionSource_, Update.class);
        } catch (SQLException e) {
            Log.e("EquipeFragment_", "Could not create DAO", e);
        }
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
    }

    private void afterSetContentView_() {
        listView = ((ListView) findViewById(org.jared.android.volley.R.id.listView));
        favorite = ((ImageView) findViewById(org.jared.android.volley.R.id.favorite));
        progressBar = ((ProgressBar) findViewById(org.jared.android.volley.R.id.progressBar));
        title = ((TextView) findViewById(org.jared.android.volley.R.id.title));
        maj = ((TextView) findViewById(org.jared.android.volley.R.id.maj));
        {
            View view = findViewById(org.jared.android.volley.R.id.favorite);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        EquipeFragment_.this.favoriteClicked();
                    }

                }
                );
            }
        }
        afterViews();
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        contentView_ = super.onCreateView(inflater, container, savedInstanceState);
        if (contentView_ == null) {
            contentView_ = inflater.inflate(layout.equipe_detail_layout, container, false);
        }
        afterSetContentView_();
        return contentView_;
    }

    public View findViewById(int id) {
        if (contentView_ == null) {
            return null;
        }
        return contentView_.findViewById(id);
    }

    public static EquipeFragment_.FragmentBuilder_ builder() {
        return new EquipeFragment_.FragmentBuilder_();
    }

    @Override
    public void updateUI(final String codeEquipe) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                try {
                    EquipeFragment_.super.updateUI(codeEquipe);
                } catch (RuntimeException e) {
                    Log.e("EquipeFragment_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void executeAction(final Action action) {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    EquipeFragment_.super.executeAction(action);
                } catch (RuntimeException e) {
                    Log.e("EquipeFragment_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void updateFromNetwork(final String codeEquipe) {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    EquipeFragment_.super.updateFromNetwork(codeEquipe);
                } catch (RuntimeException e) {
                    Log.e("EquipeFragment_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    public static class FragmentBuilder_ {

        private Bundle args_;

        private FragmentBuilder_() {
            args_ = new Bundle();
        }

        public EquipeFragment build() {
            EquipeFragment_ fragment_ = new EquipeFragment_();
            fragment_.setArguments(args_);
            return fragment_;
        }

    }

}
