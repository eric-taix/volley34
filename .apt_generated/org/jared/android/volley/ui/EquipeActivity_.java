//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations.
//


package org.jared.android.volley.ui;

import java.util.List;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;
import com.actionbarsherlock.view.MenuItem;
import com.googlecode.androidannotations.api.BackgroundExecutor;
import org.jared.android.volley.R.layout;
import org.jared.android.volley.VolleyApplication;
import org.jared.android.volley.model.Equipe;
import org.jared.android.volley.model.EquipeDetail;
import org.jared.android.volley.model.Event;
import org.jared.android.volley.ui.widget.quickaction.Action;

public final class EquipeActivity_
    extends EquipeActivity
{

    private Handler handler_ = new Handler();

    @Override
    public void onCreate(Bundle savedInstanceState) {
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        setContentView(layout.equipe_detail_layout);
    }

    private void init_(Bundle savedInstanceState) {
        application = ((VolleyApplication) this.getApplication());
    }

    private void afterSetContentView_() {
        favorite = ((ImageView) findViewById(org.jared.android.volley.R.id.favorite));
        title = ((TextView) findViewById(org.jared.android.volley.R.id.title));
        progressBar = ((ProgressBar) findViewById(org.jared.android.volley.R.id.progressBar));
        maj = ((TextView) findViewById(org.jared.android.volley.R.id.maj));
        listView = ((ListView) findViewById(org.jared.android.volley.R.id.listView));
        {
            View view = findViewById(org.jared.android.volley.R.id.favorite);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        EquipeActivity_.this.favoriteClicked();
                    }

                }
                );
            }
        }
        afterViews();
    }

    @Override
    public void setContentView(int layoutResID) {
        super.setContentView(layoutResID);
        afterSetContentView_();
    }

    @Override
    public void setContentView(View view, LayoutParams params) {
        super.setContentView(view, params);
        afterSetContentView_();
    }

    @Override
    public void setContentView(View view) {
        super.setContentView(view);
        afterSetContentView_();
    }

    public static EquipeActivity_.IntentBuilder_ intent(Context context) {
        return new EquipeActivity_.IntentBuilder_(context);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        boolean handled = super.onOptionsItemSelected(item);
        if (handled) {
            return true;
        }
        int itemId_ = item.getItemId();
        if (itemId_ == android.R.id.home) {
            return backHome();
        }
        return false;
    }

    @Override
    public void updateDetailUI(final EquipeDetail ed) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                try {
                    EquipeActivity_.super.updateDetailUI(ed);
                } catch (RuntimeException e) {
                    Log.e("EquipeActivity_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void updateCalendarUI(final List<Event> events) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                try {
                    EquipeActivity_.super.updateCalendarUI(events);
                } catch (RuntimeException e) {
                    Log.e("EquipeActivity_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void updateEquipeUI(final Equipe equipe) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                try {
                    EquipeActivity_.super.updateEquipeUI(equipe);
                } catch (RuntimeException e) {
                    Log.e("EquipeActivity_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void updateCalendarFromNetwork(final String codeEquipe) {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    EquipeActivity_.super.updateCalendarFromNetwork(codeEquipe);
                } catch (RuntimeException e) {
                    Log.e("EquipeActivity_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void updateEquipeFromDB(final String code) {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    EquipeActivity_.super.updateEquipeFromDB(code);
                } catch (RuntimeException e) {
                    Log.e("EquipeActivity_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void updateEquipe(final Equipe equipeToUpdate) {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    EquipeActivity_.super.updateEquipe(equipeToUpdate);
                } catch (RuntimeException e) {
                    Log.e("EquipeActivity_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void executeAction(final Action action) {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    EquipeActivity_.super.executeAction(action);
                } catch (RuntimeException e) {
                    Log.e("EquipeActivity_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void updateDetailFromNetwork(final String codeEquipe) {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    EquipeActivity_.super.updateDetailFromNetwork(codeEquipe);
                } catch (RuntimeException e) {
                    Log.e("EquipeActivity_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    public static class IntentBuilder_ {

        private Context context_;
        private final Intent intent_;

        public IntentBuilder_(Context context) {
            context_ = context;
            intent_ = new Intent(context, EquipeActivity_.class);
        }

        public Intent get() {
            return intent_;
        }

        public EquipeActivity_.IntentBuilder_ flags(int flags) {
            intent_.setFlags(flags);
            return this;
        }

        public void start() {
            context_.startActivity(intent_);
        }

        public void startForResult(int requestCode) {
            if (context_ instanceof Activity) {
                ((Activity) context_).startActivityForResult(intent_, requestCode);
            } else {
                context_.startActivity(intent_);
            }
        }

    }

}
